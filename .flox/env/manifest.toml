#
# This is a Flox environment manifest.
# Visit flox.dev/docs/concepts/manifest/ # or see flox-edit(1), manifest.toml(5) for more information.
#
version = 1
# List packages you wish to install in your environment inside # the `[install]` section.
[install]
gnumake.pkg-path = "gnumake"
icu.pkg-path = "icu"
libidn.pkg-path = "libidn"
libxml2.pkg-path = "libxml2"
libxslt.pkg-path = "libxslt"
libyaml.pkg-path = "libyaml"
openssl.pkg-path = "openssl"
pkg-config.pkg-path = "pkg-config"
postgresql.pkg-path = "postgresql"
ruby.pkg-path = "ruby"
clang.pkg-path = "clang"
yarn-berry.pkg-path = "yarn-berry"
foreman.pkg-path = "foreman"
redis.pkg-path = "redis"
imagemagick.pkg-path = "imagemagick"
overmind.pkg-path = "overmind"
# hello.pkg-path = "hello"
# nodejs = { version = "^18.4.2", pkg-path = "nodejs_18" }

# Set environment variables in the `[vars]` section. These variables may not
# reference one another, and are added to the environment without first
# expanding them. They are available for use in the `[profile]` and `[hook]`
# scripts.
[vars]



# The `hook.on-activate` script is run by the *bash* shell immediately upon
# activating an environment, and will not be invoked if Flox detects that the
# environment has previously been activated. Variables set by the script will
# be inherited by `[profile]` scripts defined below. Note that any stdout
# generated by the script will be redirected to stderr.
[hook]
 on-activate = '''
  # Set variables, create files and directories

  # Ruby setup
  unset CPATH
  bundle config set --local path 'vendor'
  export PATH="$FLOX_ENV_PROJECT/vendor/ruby/3.1.0/bin:$PATH"
  export RAILS_ENV=development

  # Postgres setup
  export PGPORT="${PGPORT:-5433}"

  export PGUSER=mastodon
  export PGPASS=mastodon
  export PGDATABASE=mastodon_development
  export SESSION_SECRET="$USER-session-secret"

  # Postgres environment variables
  export PGHOST=$PWD/data
  export PGDATA=$PGHOST/postgres_data
  export LOG_PATH=$PGHOST/log
  export DATABASE_URL="postgresql:///$PGDATABASE?host=$PGHOST&port=$PGPORT"

  mkdir -p $PGHOST
  mkdir -p $LOG_PATH
  if [ ! -d $PGDATA ]; then
    echo 'Initializing postgresql database...'
    initdb $PGDATA --username $PGUSER -A md5 --pwfile=<(echo $PGPASS) --auth=trust  --no-instructions
    echo "listen_addresses='*'" >> $PGDATA/postgresql.conf
    echo "unix_socket_directories='$PGHOST'" >> $PGDATA/postgresql.conf
    echo "unix_socket_permissions=0700" >> $PGDATA/postgresql.conf
  fi

  # Redis setup
  export REDIS_DIR=$PGHOST/redis
  mkdir -p $REDIS_DIR



  if [ -z "$FLOX_QUIET" ] ; then
		echo
		echo
		echo "To manage the postgresql server, run:"
		echo "  pg_ctl -D $PGDATA -l $LOG_PATH/postgres.log <start|stop|restart>"

		echo 
		echo
		echo "To manage redis: "
		echo "   start: redis-server --dir $REDIS_DIR --logfile $REDIS_DIR/log --pidfile $REDIS_DIR/redis.pid --daemonize yes "
		echo "   stop:  redis-cli shutdown "

    echo 
    echo
    echo "You can now run 'mastodon-setup' to start the services and setup the database. "
    echo "This will start the postgresql server, redis server, install the gems and yarn packages, setup the database and start the mastodon server."
    echo 
    echo "If you've set up mastodon before, you can run 'bin/dev' to start working."

		echo 
		echo
		echo "To reduce on-screen output upon activation, set the FLOX_QUIET environment variable to any value."
  fi
  
'''

# Scripts defined in the `[profile]` section are *sourced* by *your shell* and
# inherit environment variables set in the `[vars]` section and by `[hook]` scripts.
# The `profile.common` script is sourced by all shells and special care should be
# taken to ensure compatibility with all shells, after which exactly one of
# `profile.{bash,fish,tcsh,zsh}` is sourced by the corresponding shell.
[profile]
 common = '''
   alias mastodon-setup="mkdir -p $PGDATA $PGHOST $REDIS_DIR; pg_ctl -D $PGDATA -l $LOG_PATH/postgres.log start && redis-server --dir $REDIS_DIR --logfile $REDIS_DIR/log --pidfile $REDIS_DIR/redis.pid --daemonize yes && bundle install && yarn install && bin/rails db:prepare && bin/rails log:clear tmp:clear"
   alias reset-demo="redis-cli shutdown ; pg_ctl -D /Users/stahnma/development/mastodon/data/postgres_data -l /Users/stahnma/development/mastodon/data/log/postgres.log stop; rm -rf /Users/stahnma/development/mastodon/{data,node_modules,vendor/ruby}"
 '''

# Additional options can be set in the `[options]` section. Refer to
# manifest.toml(5) for a list of available options.
[options]
systems = ["aarch64-darwin", "aarch64-linux", "x86_64-darwin", "x86_64-linux"]
# Uncomment to disable CUDA detection.
# cuda-detection = false

